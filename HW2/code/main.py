#######################################################################
# IMPORTS
#######################################################################
import numpy as np
#######################################################################
# CPT tables
#######################################################################
p_A_C = np.array([[0.999, 0.001],[0,1]]) # P(A|C)
p_C_V = np.array([[0.02, 0.98], # P(C|V)
                [0.02, 0.98],
                [0.02, 0.98],
                [0.98, 0.02],
                [0.98, 0.02]])
p_V_S = np.array([[0.9, 0.1, 0, 0, 0], # P(V|S)
                [0.1, 0.8, 0.1, 0, 0],
                [0, 0.1, 0.8, 0.1, 0],
                [0, 0, 0.1, 0.8, 0.1],
                [0, 0, 0, 0.1, 0.9]])
p_S = np.array([0.2,0.2,0.2,0.2,0.2]) # P(S)

#######################################################################
# Code starts here
#######################################################################
bn_sum = 0.
for v in range(p_C_V.shape[0]):
    for c in range(p_A_C.shape[0]):
        bn_sum += p_A_C[c, 0]*p_C_V[v, c]*p_V_S[-1, v]*p_S[-1]
alpha = 0.
for c in range(p_A_C.shape[0]):
    for v in range(p_C_V.shape[0]):
        for s in range(p_S.shape[0]):
            alpha += p_A_C[c, 0]*p_C_V[v, c]*p_V_S[s, v]*p_S[s]
print("P(S=5|A=T) = ", bn_sum/alpha)
